import 'dart:math' show Random;

import '../../generator_base.dart';

/// A generator that selects from weighted generators.
///
/// Each generator has a weight, and the probability of selecting a generator
/// is proportional to its weight relative to the total weight.
class FrequencyGenerator<T> extends Generator<T> {
  final List<(int weight, Generator<T> generator)> weightedGenerators;
  final int totalWeight;

  FrequencyGenerator(this.weightedGenerators)
      : totalWeight = weightedGenerators.fold(0, (sum, item) {
          if (item.$1 <= 0) {
            throw ArgumentError('Weights must be positive: ${item.$1}');
          }
          return sum + item.$1;
        }) {
    if (weightedGenerators.isEmpty) {
      throw ArgumentError('weightedGenerators must not be empty');
    }
    if (totalWeight <= 0) {
      // This case should be caught by the individual weight check, but as a safeguard:
      throw ArgumentError('Total weight must be positive');
    }
  }

  @override
  ShrinkableValue<T> generate(Random random) {
    var value = random.nextInt(totalWeight);
    Generator<T>? chosenGenerator;

    for (final item in weightedGenerators) {
      if (value < item.$1) {
        chosenGenerator = item.$2;
        break;
      }
      value -= item.$1;
    }

    // chosenGenerator should always be non-null if totalWeight > 0
    final shrinkable = chosenGenerator!.generate(random);

    // Shrinking only shrinks the value generated by the chosen generator.
    // It does NOT try to switch to a different generator from the list.
    return ShrinkableValue(shrinkable.value, shrinkable.shrinks);
  }
}
