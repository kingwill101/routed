// Mocks generated by Mockito 5.4.5 from annotations
// in routed_testing/src/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:convert' as _i4;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:routed/src/engine/config.dart' as _i5;
import 'package:routed/src/request.dart' as _i8;
import 'package:routed/src/response.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpHeaders_1 extends _i1.SmartFake implements _i2.HttpHeaders {
  _FakeHttpHeaders_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpSession_2 extends _i1.SmartFake implements _i2.HttpSession {
  _FakeHttpSession_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpResponse_3 extends _i1.SmartFake implements _i2.HttpResponse {
  _FakeHttpResponse_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeStreamSubscription_4<T> extends _i1.SmartFake
    implements _i3.StreamSubscription<T> {
  _FakeStreamSubscription_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFuture_5<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeEncoding_6 extends _i1.SmartFake implements _i4.Encoding {
  _FakeEncoding_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSocket_7 extends _i1.SmartFake implements _i2.Socket {
  _FakeSocket_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpRequest_8 extends _i1.SmartFake implements _i2.HttpRequest {
  _FakeHttpRequest_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeEngineConfig_9 extends _i1.SmartFake implements _i5.EngineConfig {
  _FakeEngineConfig_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeInternetAddress_10 extends _i1.SmartFake
    implements _i2.InternetAddress {
  _FakeInternetAddress_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [HttpRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpRequest extends _i1.Mock implements _i2.HttpRequest {
  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_0(this, Invocation.getter(#uri)),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  Uri get requestedUri => (super.noSuchMethod(
        Invocation.getter(#requestedUri),
        returnValue: _FakeUri_0(this, Invocation.getter(#requestedUri)),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.getter(#requestedUri),
        ),
      ) as Uri);

  @override
  _i2.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_1(this, Invocation.getter(#headers)),
        returnValueForMissingStub: _FakeHttpHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.HttpHeaders);

  @override
  List<_i2.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i2.Cookie>[],
        returnValueForMissingStub: <_i2.Cookie>[],
      ) as List<_i2.Cookie>);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.HttpSession get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeHttpSession_2(this, Invocation.getter(#session)),
        returnValueForMissingStub: _FakeHttpSession_2(
          this,
          Invocation.getter(#session),
        ),
      ) as _i2.HttpSession);

  @override
  String get protocolVersion => (super.noSuchMethod(
        Invocation.getter(#protocolVersion),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#protocolVersion),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#protocolVersion),
        ),
      ) as String);

  @override
  _i2.HttpResponse get response => (super.noSuchMethod(
        Invocation.getter(#response),
        returnValue: _FakeHttpResponse_3(
          this,
          Invocation.getter(#response),
        ),
        returnValueForMissingStub: _FakeHttpResponse_3(
          this,
          Invocation.getter(#response),
        ),
      ) as _i2.HttpResponse);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i7.Uint8List> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Future<_i7.Uint8List> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Future<_i7.Uint8List> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Stream<_i7.Uint8List> asBroadcastStream({
    void Function(_i3.StreamSubscription<_i7.Uint8List>)? onListen,
    void Function(_i3.StreamSubscription<_i7.Uint8List>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#asBroadcastStream, [], {
          #onListen: onListen,
          #onCancel: onCancel,
        }),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.StreamSubscription<_i7.Uint8List> listen(
    void Function(_i7.Uint8List)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_4<_i7.Uint8List>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
        returnValueForMissingStub: _FakeStreamSubscription_4<_i7.Uint8List>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i3.StreamSubscription<_i7.Uint8List>);

  @override
  _i3.Stream<_i7.Uint8List> where(bool Function(_i7.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(#where, [test]),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.Stream<S> map<S>(S Function(_i7.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(#map, [convert]),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Stream<E> asyncMap<E>(_i3.FutureOr<E> Function(_i7.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(#asyncMap, [convert]),
        returnValue: _i3.Stream<E>.empty(),
        returnValueForMissingStub: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<E> asyncExpand<E>(_i3.Stream<E>? Function(_i7.Uint8List)? convert,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#asyncExpand, [convert]),
        returnValue: _i3.Stream<E>.empty(),
        returnValueForMissingStub: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<_i7.Uint8List> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#handleError, [onError], {#test: test}),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.Stream<S> expand<S>(Iterable<S> Function(_i7.Uint8List)? convert) =>
      (super.noSuchMethod(
        Invocation.method(#expand, [convert]),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<dynamic> pipe(_i3.StreamConsumer<_i7.Uint8List>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(#pipe, [streamConsumer]),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Stream<S> transform<S>(
    _i3.StreamTransformer<_i7.Uint8List, S>? streamTransformer,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#transform, [streamTransformer]),
        returnValue: _i3.Stream<S>.empty(),
        returnValueForMissingStub: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<_i7.Uint8List> reduce(
    _i7.Uint8List Function(_i7.Uint8List, _i7.Uint8List)? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#reduce, [combine]),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Future<S> fold<S>(
    S? initialValue,
    S Function(S, _i7.Uint8List)? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#fold, [initialValue, combine]),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<S>(
                this,
                Invocation.method(#fold, [initialValue, combine]),
              ),
              (S v) => _i3.Future<S>.value(v),
            ) ??
            _FakeFuture_5<S>(
              this,
              Invocation.method(#fold, [initialValue, combine]),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<S>(
                this,
                Invocation.method(#fold, [initialValue, combine]),
              ),
              (S v) => _i3.Future<S>.value(v),
            ) ??
            _FakeFuture_5<S>(
              this,
              Invocation.method(#fold, [initialValue, combine]),
            ),
      ) as _i3.Future<S>);

  @override
  _i3.Future<String> join([String? separator = '']) => (super.noSuchMethod(
        Invocation.method(#join, [separator]),
        returnValue: _i3.Future<String>.value(
          _i6.dummyValue<String>(
            this,
            Invocation.method(#join, [separator]),
          ),
        ),
        returnValueForMissingStub: _i3.Future<String>.value(
          _i6.dummyValue<String>(
            this,
            Invocation.method(#join, [separator]),
          ),
        ),
      ) as _i3.Future<String>);

  @override
  _i3.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(#contains, [needle]),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> forEach(void Function(_i7.Uint8List)? action) =>
      (super.noSuchMethod(
        Invocation.method(#forEach, [action]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> every(bool Function(_i7.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(#every, [test]),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> any(bool Function(_i7.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(#any, [test]),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(#cast, []),
        returnValue: _i3.Stream<R>.empty(),
        returnValueForMissingStub: _i3.Stream<R>.empty(),
      ) as _i3.Stream<R>);

  @override
  _i3.Future<List<_i7.Uint8List>> toList() => (super.noSuchMethod(
        Invocation.method(#toList, []),
        returnValue: _i3.Future<List<_i7.Uint8List>>.value(
          <_i7.Uint8List>[],
        ),
        returnValueForMissingStub: _i3.Future<List<_i7.Uint8List>>.value(
          <_i7.Uint8List>[],
        ),
      ) as _i3.Future<List<_i7.Uint8List>>);

  @override
  _i3.Future<Set<_i7.Uint8List>> toSet() => (super.noSuchMethod(
        Invocation.method(#toSet, []),
        returnValue: _i3.Future<Set<_i7.Uint8List>>.value(
          <_i7.Uint8List>{},
        ),
        returnValueForMissingStub: _i3.Future<Set<_i7.Uint8List>>.value(
          <_i7.Uint8List>{},
        ),
      ) as _i3.Future<Set<_i7.Uint8List>>);

  @override
  _i3.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(#drain, [futureValue]),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<E>(
                this,
                Invocation.method(#drain, [futureValue]),
              ),
              (E v) => _i3.Future<E>.value(v),
            ) ??
            _FakeFuture_5<E>(
              this,
              Invocation.method(#drain, [futureValue]),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<E>(
                this,
                Invocation.method(#drain, [futureValue]),
              ),
              (E v) => _i3.Future<E>.value(v),
            ) ??
            _FakeFuture_5<E>(
              this,
              Invocation.method(#drain, [futureValue]),
            ),
      ) as _i3.Future<E>);

  @override
  _i3.Stream<_i7.Uint8List> take(int? count) => (super.noSuchMethod(
        Invocation.method(#take, [count]),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.Stream<_i7.Uint8List> takeWhile(bool Function(_i7.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(#takeWhile, [test]),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.Stream<_i7.Uint8List> skip(int? count) => (super.noSuchMethod(
        Invocation.method(#skip, [count]),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.Stream<_i7.Uint8List> skipWhile(bool Function(_i7.Uint8List)? test) =>
      (super.noSuchMethod(
        Invocation.method(#skipWhile, [test]),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.Stream<_i7.Uint8List> distinct([
    bool Function(_i7.Uint8List, _i7.Uint8List)? equals,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(#distinct, [equals]),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);

  @override
  _i3.Future<_i7.Uint8List> firstWhere(
    bool Function(_i7.Uint8List)? test, {
    _i7.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#firstWhere, [test], {#orElse: orElse}),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Future<_i7.Uint8List> lastWhere(
    bool Function(_i7.Uint8List)? test, {
    _i7.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#lastWhere, [test], {#orElse: orElse}),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Future<_i7.Uint8List> singleWhere(
    bool Function(_i7.Uint8List)? test, {
    _i7.Uint8List Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#singleWhere, [test], {#orElse: orElse}),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Future<_i7.Uint8List> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(#elementAt, [index]),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  _i3.Stream<_i7.Uint8List> timeout(
    Duration? timeLimit, {
    void Function(_i3.EventSink<_i7.Uint8List>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#timeout, [timeLimit], {#onTimeout: onTimeout}),
        returnValue: _i3.Stream<_i7.Uint8List>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.Uint8List>.empty(),
      ) as _i3.Stream<_i7.Uint8List>);
}

/// A class which mocks [HttpResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpResponse extends _i1.Mock implements _i2.HttpResponse {
  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(#contentLength, _contentLength),
        returnValueForMissingStub: null,
      );

  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set statusCode(int? _statusCode) => super.noSuchMethod(
        Invocation.setter(#statusCode, _statusCode),
        returnValueForMissingStub: null,
      );

  @override
  String get reasonPhrase => (super.noSuchMethod(
        Invocation.getter(#reasonPhrase),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#reasonPhrase),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#reasonPhrase),
        ),
      ) as String);

  @override
  set reasonPhrase(String? _reasonPhrase) => super.noSuchMethod(
        Invocation.setter(#reasonPhrase, _reasonPhrase),
        returnValueForMissingStub: null,
      );

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(#persistentConnection, _persistentConnection),
        returnValueForMissingStub: null,
      );

  @override
  set deadline(Duration? _deadline) => super.noSuchMethod(
        Invocation.setter(#deadline, _deadline),
        returnValueForMissingStub: null,
      );

  @override
  bool get bufferOutput => (super.noSuchMethod(
        Invocation.getter(#bufferOutput),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set bufferOutput(bool? _bufferOutput) => super.noSuchMethod(
        Invocation.setter(#bufferOutput, _bufferOutput),
        returnValueForMissingStub: null,
      );

  @override
  _i2.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_1(this, Invocation.getter(#headers)),
        returnValueForMissingStub: _FakeHttpHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.HttpHeaders);

  @override
  List<_i2.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i2.Cookie>[],
        returnValueForMissingStub: <_i2.Cookie>[],
      ) as List<_i2.Cookie>);

  @override
  _i4.Encoding get encoding => (super.noSuchMethod(
        Invocation.getter(#encoding),
        returnValue: _FakeEncoding_6(this, Invocation.getter(#encoding)),
        returnValueForMissingStub: _FakeEncoding_6(
          this,
          Invocation.getter(#encoding),
        ),
      ) as _i4.Encoding);

  @override
  set encoding(_i4.Encoding? _encoding) => super.noSuchMethod(
        Invocation.setter(#encoding, _encoding),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<dynamic> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> redirect(Uri? location, {int? status = 302}) =>
      (super.noSuchMethod(
        Invocation.method(#redirect, [location], {#status: status}),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<_i2.Socket> detachSocket({bool? writeHeaders = true}) =>
      (super.noSuchMethod(
        Invocation.method(#detachSocket, [], {#writeHeaders: writeHeaders}),
        returnValue: _i3.Future<_i2.Socket>.value(
          _FakeSocket_7(
            this,
            Invocation.method(#detachSocket, [], {
              #writeHeaders: writeHeaders,
            }),
          ),
        ),
        returnValueForMissingStub: _i3.Future<_i2.Socket>.value(
          _FakeSocket_7(
            this,
            Invocation.method(#detachSocket, [], {
              #writeHeaders: writeHeaders,
            }),
          ),
        ),
      ) as _i3.Future<_i2.Socket>);

  @override
  void add(List<int>? data) => super.noSuchMethod(
        Invocation.method(#add, [data]),
        returnValueForMissingStub: null,
      );

  @override
  void write(Object? object) => super.noSuchMethod(
        Invocation.method(#write, [object]),
        returnValueForMissingStub: null,
      );

  @override
  void writeAll(Iterable<dynamic>? objects, [String? separator = '']) =>
      super.noSuchMethod(
        Invocation.method(#writeAll, [objects, separator]),
        returnValueForMissingStub: null,
      );

  @override
  void writeln([Object? object = '']) => super.noSuchMethod(
        Invocation.method(#writeln, [object]),
        returnValueForMissingStub: null,
      );

  @override
  void writeCharCode(int? charCode) => super.noSuchMethod(
        Invocation.method(#writeCharCode, [charCode]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
        Invocation.method(#addError, [error, stackTrace]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<dynamic> addStream(_i3.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
        Invocation.method(#addStream, [stream]),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(#flush, []),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i3.Future<dynamic>.value(),
        returnValueForMissingStub: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i2.HttpHeaders {
  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(#date, _date),
        returnValueForMissingStub: null,
      );

  @override
  set expires(DateTime? _expires) => super.noSuchMethod(
        Invocation.setter(#expires, _expires),
        returnValueForMissingStub: null,
      );

  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) => super.noSuchMethod(
        Invocation.setter(#ifModifiedSince, _ifModifiedSince),
        returnValueForMissingStub: null,
      );

  @override
  set host(String? _host) => super.noSuchMethod(
        Invocation.setter(#host, _host),
        returnValueForMissingStub: null,
      );

  @override
  set port(int? _port) => super.noSuchMethod(
        Invocation.setter(#port, _port),
        returnValueForMissingStub: null,
      );

  @override
  set contentType(_i2.ContentType? _contentType) => super.noSuchMethod(
        Invocation.setter(#contentType, _contentType),
        returnValueForMissingStub: null,
      );

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(#contentLength, _contentLength),
        returnValueForMissingStub: null,
      );

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(#persistentConnection, _persistentConnection),
        returnValueForMissingStub: null,
      );

  @override
  bool get chunkedTransferEncoding => (super.noSuchMethod(
        Invocation.getter(#chunkedTransferEncoding),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
        Invocation.setter(#chunkedTransferEncoding, _chunkedTransferEncoding),
        returnValueForMissingStub: null,
      );

  @override
  List<String>? operator [](String? name) => (super.noSuchMethod(
        Invocation.method(#[], [name]),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  String? value(String? name) => (super.noSuchMethod(
        Invocation.method(#value, [name]),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  void add(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [name, value],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void set(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [name, value],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(String? name, Object? value) => super.noSuchMethod(
        Invocation.method(#remove, [name, value]),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(String? name) => super.noSuchMethod(
        Invocation.method(#removeAll, [name]),
        returnValueForMissingStub: null,
      );

  @override
  void forEach(void Function(String, List<String>)? action) =>
      super.noSuchMethod(
        Invocation.method(#forEach, [action]),
        returnValueForMissingStub: null,
      );

  @override
  void noFolding(String? name) => super.noSuchMethod(
        Invocation.method(#noFolding, [name]),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(#clear, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Request].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequest extends _i1.Mock implements _i8.Request {
  @override
  _i2.HttpRequest get httpRequest => (super.noSuchMethod(
        Invocation.getter(#httpRequest),
        returnValue: _FakeHttpRequest_8(
          this,
          Invocation.getter(#httpRequest),
        ),
        returnValueForMissingStub: _FakeHttpRequest_8(
          this,
          Invocation.getter(#httpRequest),
        ),
      ) as _i2.HttpRequest);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i6.dummyValue<String>(this, Invocation.getter(#id)),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  Map<String, dynamic> get pathParameters => (super.noSuchMethod(
        Invocation.getter(#pathParameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, String> get queryParameters => (super.noSuchMethod(
        Invocation.getter(#queryParameters),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  _i5.EngineConfig get config => (super.noSuchMethod(
        Invocation.getter(#config),
        returnValue: _FakeEngineConfig_9(this, Invocation.getter(#config)),
        returnValueForMissingStub: _FakeEngineConfig_9(
          this,
          Invocation.getter(#config),
        ),
      ) as _i5.EngineConfig);

  @override
  set config(_i5.EngineConfig? _config) => super.noSuchMethod(
        Invocation.setter(#config, _config),
        returnValueForMissingStub: null,
      );

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_0(this, Invocation.getter(#uri)),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  Uri get requestedUri => (super.noSuchMethod(
        Invocation.getter(#requestedUri),
        returnValue: _FakeUri_0(this, Invocation.getter(#requestedUri)),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.getter(#requestedUri),
        ),
      ) as Uri);

  @override
  _i2.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_1(this, Invocation.getter(#headers)),
        returnValueForMissingStub: _FakeHttpHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.HttpHeaders);

  @override
  List<_i2.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i2.Cookie>[],
        returnValueForMissingStub: <_i2.Cookie>[],
      ) as List<_i2.Cookie>);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.HttpSession get session => (super.noSuchMethod(
        Invocation.getter(#session),
        returnValue: _FakeHttpSession_2(this, Invocation.getter(#session)),
        returnValueForMissingStub: _FakeHttpSession_2(
          this,
          Invocation.getter(#session),
        ),
      ) as _i2.HttpSession);

  @override
  String get protocolVersion => (super.noSuchMethod(
        Invocation.getter(#protocolVersion),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#protocolVersion),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#protocolVersion),
        ),
      ) as String);

  @override
  _i2.HttpResponse get response => (super.noSuchMethod(
        Invocation.getter(#response),
        returnValue: _FakeHttpResponse_3(
          this,
          Invocation.getter(#response),
        ),
        returnValueForMissingStub: _FakeHttpResponse_3(
          this,
          Invocation.getter(#response),
        ),
      ) as _i2.HttpResponse);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i6.dummyValue<String>(this, Invocation.getter(#path)),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i6.dummyValue<String>(this, Invocation.getter(#host)),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  String get scheme => (super.noSuchMethod(
        Invocation.getter(#scheme),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#scheme),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#scheme),
        ),
      ) as String);

  @override
  String get remoteAddr => (super.noSuchMethod(
        Invocation.getter(#remoteAddr),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#remoteAddr),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#remoteAddr),
        ),
      ) as String);

  @override
  _i3.Future<_i7.Uint8List> get bytes => (super.noSuchMethod(
        Invocation.getter(#bytes),
        returnValue: _i3.Future<_i7.Uint8List>.value(_i7.Uint8List(0)),
        returnValueForMissingStub: _i3.Future<_i7.Uint8List>.value(
          _i7.Uint8List(0),
        ),
      ) as _i3.Future<_i7.Uint8List>);

  @override
  String get clientIP => (super.noSuchMethod(
        Invocation.getter(#clientIP),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#clientIP),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#clientIP),
        ),
      ) as String);

  @override
  dynamic header(String? name) => super.noSuchMethod(
        Invocation.method(#header, [name]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.FutureOr<String> body() => (super.noSuchMethod(
        Invocation.method(#body, []),
        returnValue: _i3.Future<String>.value(
          _i6.dummyValue<String>(this, Invocation.method(#body, [])),
        ),
        returnValueForMissingStub: _i3.Future<String>.value(
          _i6.dummyValue<String>(this, Invocation.method(#body, [])),
        ),
      ) as _i3.FutureOr<String>);

  @override
  T? getAttribute<T>(String? key) => (super.noSuchMethod(
        Invocation.method(#getAttribute, [key]),
        returnValueForMissingStub: null,
      ) as T?);

  @override
  void setAttribute(String? key, dynamic value) => super.noSuchMethod(
        Invocation.method(#setAttribute, [key, value]),
        returnValueForMissingStub: null,
      );

  @override
  void clearAttributes() => super.noSuchMethod(
        Invocation.method(#clearAttributes, []),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse extends _i1.Mock implements _i9.Response {
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasTransferEncoding => (super.noSuchMethod(
        Invocation.getter(#hasTransferEncoding),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i2.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i2.Cookie>[],
        returnValueForMissingStub: <_i2.Cookie>[],
      ) as List<_i2.Cookie>);

  @override
  _i2.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_1(this, Invocation.getter(#headers)),
        returnValueForMissingStub: _FakeHttpHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.HttpHeaders);

  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set statusCode(int? value) => super.noSuchMethod(
        Invocation.setter(#statusCode, value),
        returnValueForMissingStub: null,
      );

  @override
  _i2.HttpResponse get httpResponse => (super.noSuchMethod(
        Invocation.getter(#httpResponse),
        returnValue: _FakeHttpResponse_3(
          this,
          Invocation.getter(#httpResponse),
        ),
        returnValueForMissingStub: _FakeHttpResponse_3(
          this,
          Invocation.getter(#httpResponse),
        ),
      ) as _i2.HttpResponse);

  @override
  void write(dynamic data) => super.noSuchMethod(
        Invocation.method(#write, [data]),
        returnValueForMissingStub: null,
      );

  @override
  void writeBytes(List<int>? data) => super.noSuchMethod(
        Invocation.method(#writeBytes, [data]),
        returnValueForMissingStub: null,
      );

  @override
  void writeHeaderNow() => super.noSuchMethod(
        Invocation.method(#writeHeaderNow, []),
        returnValueForMissingStub: null,
      );

  @override
  void writeNow() => super.noSuchMethod(
        Invocation.method(#writeNow, []),
        returnValueForMissingStub: null,
      );

  @override
  void close() => super.noSuchMethod(
        Invocation.method(#close, []),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> string(String? content, {int? statusCode = 200}) =>
      (super.noSuchMethod(
        Invocation.method(#string, [content], {#statusCode: statusCode}),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> json(Map<String, dynamic>? data, {int? statusCode = 200}) =>
      (super.noSuchMethod(
        Invocation.method(#json, [data], {#statusCode: statusCode}),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void error(String? message, {int? statusCode = 500}) => super.noSuchMethod(
        Invocation.method(#error, [message], {#statusCode: statusCode}),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> addStream(_i3.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
        Invocation.method(#addStream, [stream]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i2.HttpResponse download(
    _i2.File? file, {
    String? name,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [file],
          {#name: name, #headers: headers},
        ),
        returnValue: _FakeHttpResponse_3(
          this,
          Invocation.method(
            #download,
            [file],
            {#name: name, #headers: headers},
          ),
        ),
        returnValueForMissingStub: _FakeHttpResponse_3(
          this,
          Invocation.method(
            #download,
            [file],
            {#name: name, #headers: headers},
          ),
        ),
      ) as _i2.HttpResponse);

  @override
  _i2.HttpResponse redirect(
    String? location, {
    int? status = 302,
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #redirect,
          [location],
          {#status: status, #headers: headers},
        ),
        returnValue: _FakeHttpResponse_3(
          this,
          Invocation.method(
            #redirect,
            [location],
            {#status: status, #headers: headers},
          ),
        ),
        returnValueForMissingStub: _FakeHttpResponse_3(
          this,
          Invocation.method(
            #redirect,
            [location],
            {#status: status, #headers: headers},
          ),
        ),
      ) as _i2.HttpResponse);

  @override
  void setCookie(
    String? name,
    dynamic value, {
    int? maxAge,
    String? path = '/',
    String? domain = '',
    bool? secure = false,
    bool? httpOnly = false,
    _i2.SameSite? sameSite,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setCookie,
          [name, value],
          {
            #maxAge: maxAge,
            #path: path,
            #domain: domain,
            #secure: secure,
            #httpOnly: httpOnly,
            #sameSite: sameSite,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addHeader(String? name, String? value) => super.noSuchMethod(
        Invocation.method(#addHeader, [name, value]),
        returnValueForMissingStub: null,
      );

  @override
  void setHeader(String? name, String? value) => super.noSuchMethod(
        Invocation.method(#setHeader, [name, value]),
        returnValueForMissingStub: null,
      );

  @override
  void removeHeader(String? name, {Object? value}) => super.noSuchMethod(
        Invocation.method(#removeHeader, [name], {#value: value}),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Uri].
///
/// See the documentation for Mockito's code generation for more information.
class MockUri extends _i1.Mock implements Uri {
  @override
  String get scheme => (super.noSuchMethod(
        Invocation.getter(#scheme),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#scheme),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#scheme),
        ),
      ) as String);

  @override
  String get authority => (super.noSuchMethod(
        Invocation.getter(#authority),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#authority),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#authority),
        ),
      ) as String);

  @override
  String get userInfo => (super.noSuchMethod(
        Invocation.getter(#userInfo),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#userInfo),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#userInfo),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i6.dummyValue<String>(this, Invocation.getter(#host)),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  int get port => (super.noSuchMethod(
        Invocation.getter(#port),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i6.dummyValue<String>(this, Invocation.getter(#path)),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  String get query => (super.noSuchMethod(
        Invocation.getter(#query),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#query),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#query),
        ),
      ) as String);

  @override
  String get fragment => (super.noSuchMethod(
        Invocation.getter(#fragment),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#fragment),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#fragment),
        ),
      ) as String);

  @override
  List<String> get pathSegments => (super.noSuchMethod(
        Invocation.getter(#pathSegments),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  Map<String, String> get queryParameters => (super.noSuchMethod(
        Invocation.getter(#queryParameters),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  Map<String, List<String>> get queryParametersAll => (super.noSuchMethod(
        Invocation.getter(#queryParametersAll),
        returnValue: <String, List<String>>{},
        returnValueForMissingStub: <String, List<String>>{},
      ) as Map<String, List<String>>);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasScheme => (super.noSuchMethod(
        Invocation.getter(#hasScheme),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasAuthority => (super.noSuchMethod(
        Invocation.getter(#hasAuthority),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasPort => (super.noSuchMethod(
        Invocation.getter(#hasPort),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasQuery => (super.noSuchMethod(
        Invocation.getter(#hasQuery),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasFragment => (super.noSuchMethod(
        Invocation.getter(#hasFragment),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasEmptyPath => (super.noSuchMethod(
        Invocation.getter(#hasEmptyPath),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasAbsolutePath => (super.noSuchMethod(
        Invocation.getter(#hasAbsolutePath),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get origin => (super.noSuchMethod(
        Invocation.getter(#origin),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#origin),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#origin),
        ),
      ) as String);

  @override
  bool isScheme(String? scheme) => (super.noSuchMethod(
        Invocation.method(#isScheme, [scheme]),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String toFilePath({bool? windows}) => (super.noSuchMethod(
        Invocation.method(#toFilePath, [], {#windows: windows}),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(#toFilePath, [], {#windows: windows}),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(#toFilePath, [], {#windows: windows}),
        ),
      ) as String);

  @override
  Uri replace({
    String? scheme,
    String? userInfo,
    String? host,
    int? port,
    String? path,
    Iterable<String>? pathSegments,
    String? query,
    Map<String, dynamic>? queryParameters,
    String? fragment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#replace, [], {
          #scheme: scheme,
          #userInfo: userInfo,
          #host: host,
          #port: port,
          #path: path,
          #pathSegments: pathSegments,
          #query: query,
          #queryParameters: queryParameters,
          #fragment: fragment,
        }),
        returnValue: _FakeUri_0(
          this,
          Invocation.method(#replace, [], {
            #scheme: scheme,
            #userInfo: userInfo,
            #host: host,
            #port: port,
            #path: path,
            #pathSegments: pathSegments,
            #query: query,
            #queryParameters: queryParameters,
            #fragment: fragment,
          }),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.method(#replace, [], {
            #scheme: scheme,
            #userInfo: userInfo,
            #host: host,
            #port: port,
            #path: path,
            #pathSegments: pathSegments,
            #query: query,
            #queryParameters: queryParameters,
            #fragment: fragment,
          }),
        ),
      ) as Uri);

  @override
  Uri removeFragment() => (super.noSuchMethod(
        Invocation.method(#removeFragment, []),
        returnValue: _FakeUri_0(
          this,
          Invocation.method(#removeFragment, []),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.method(#removeFragment, []),
        ),
      ) as Uri);

  @override
  Uri resolve(String? reference) => (super.noSuchMethod(
        Invocation.method(#resolve, [reference]),
        returnValue: _FakeUri_0(
          this,
          Invocation.method(#resolve, [reference]),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.method(#resolve, [reference]),
        ),
      ) as Uri);

  @override
  Uri resolveUri(Uri? reference) => (super.noSuchMethod(
        Invocation.method(#resolveUri, [reference]),
        returnValue: _FakeUri_0(
          this,
          Invocation.method(#resolveUri, [reference]),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.method(#resolveUri, [reference]),
        ),
      ) as Uri);

  @override
  Uri normalizePath() => (super.noSuchMethod(
        Invocation.method(#normalizePath, []),
        returnValue: _FakeUri_0(
          this,
          Invocation.method(#normalizePath, []),
        ),
        returnValueForMissingStub: _FakeUri_0(
          this,
          Invocation.method(#normalizePath, []),
        ),
      ) as Uri);
}

/// A class which mocks [HttpConnectionInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpConnectionInfo extends _i1.Mock
    implements _i2.HttpConnectionInfo {
  @override
  _i2.InternetAddress get remoteAddress => (super.noSuchMethod(
        Invocation.getter(#remoteAddress),
        returnValue: _FakeInternetAddress_10(
          this,
          Invocation.getter(#remoteAddress),
        ),
        returnValueForMissingStub: _FakeInternetAddress_10(
          this,
          Invocation.getter(#remoteAddress),
        ),
      ) as _i2.InternetAddress);

  @override
  int get remotePort => (super.noSuchMethod(
        Invocation.getter(#remotePort),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get localPort => (super.noSuchMethod(
        Invocation.getter(#localPort),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}
