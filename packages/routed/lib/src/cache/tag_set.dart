import 'package:routed/src/contracts/cache/store.dart';

/// A class that manages a set of tags for caching purposes.
class TagSet {
  /// The cache store where the tags are stored.
  final Store store;

  /// The list of tag names.
  final List<String> names;

  /// Constructs a [TagSet] with the given [store] and an optional list of [names].
  ///
  /// If [names] is not provided, it defaults to an empty list.
  TagSet(this.store, [this.names = const []]);

  /// Resets all tags in the [names] list.
  ///
  /// This method iterates over each tag name in the [names] list and calls [resetTag] on it.
  void reset() {
    names.forEach(resetTag);
  }

  /// Resets a specific tag by [name].
  ///
  /// This method generates a unique ID for the tag and stores it in the cache store
  /// with a key generated by [tagKey]. The tag is stored indefinitely.
  ///
  /// Returns the generated unique ID for the tag.
  String resetTag(String name) {
    final id = _generateUniqueId();
    store.forever(tagKey(name), id);
    return id;
  }

  /// Flushes all tags in the [names] list.
  ///
  /// This method iterates over each tag name in the [names] list and calls [flushTag] on it.
  void flush() {
    names.forEach(flushTag);
  }

  /// Flushes a specific tag by [name].
  ///
  /// This method removes the tag from the cache store using the key generated by [tagKey].
  void flushTag(String name) {
    store.forget(tagKey(name));
  }

  /// Retrieves the namespace for the tags.
  ///
  /// This method maps each tag name in the [names] list to its corresponding tag ID
  /// using [tagId], and then joins them with a '|' separator.
  ///
  /// Returns the namespace string.
  String getNamespace() {
    return names.map(tagId).join('|');
  }

  /// Retrieves the list of tag IDs.
  ///
  /// This method maps each tag name in the [names] list to its corresponding tag ID
  /// using [tagId] and returns the list of tag IDs.
  ///
  /// Returns the list of tag IDs.
  List<String> tagIds() {
    return names.map(tagId).toList();
  }

  /// Retrieves the tag ID for a specific tag by [name].
  ///
  /// This method gets the tag ID from the cache store using the key generated by [tagKey].
  /// If the tag ID is not found, it calls [resetTag] to generate a new ID and store it.
  ///
  /// Returns the tag ID.
  String tagId(String name) {
    return store.get(tagKey(name)) as String? ?? resetTag(name);
  }

  /// Generates the cache key for a specific tag by [name].
  ///
  /// This method constructs the cache key by prefixing the tag name with 'tag:' and suffixing it with ':key'.
  ///
  /// Returns the generated cache key.
  String tagKey(String name) {
    return 'tag:$name:key';
  }

  /// Retrieves the list of tag names.
  ///
  /// Returns the list of tag names.
  List<String> getNames() {
    return names;
  }

  /// Generates a unique ID for a tag.
  ///
  /// This method generates a unique ID based on the current timestamp in milliseconds.
  ///
  /// Returns the generated unique ID.
  String _generateUniqueId() {
    return DateTime.now().millisecondsSinceEpoch.toString();
  }
}
